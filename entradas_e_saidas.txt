1)
let i;
for( i = 0; i < 10; i = i + 1 ) {
}

i & i 0 = ^
i @ 10 < 14 ? 23 # i i @ 1 + = ^
6 # .

2)
let o = {
  campo: 'aba',
  pi: 31415.0 / 10000.0,
  obj: { g: 56 }
};

o & o {} campo 'aba' [<=] pi 31415.0 10000.0 / [<=] obj {} g 56 [<=] [<=] = ^
.

3)
function log( msg ) {
  msg asm{println # undefined};
}

let console = { log: log, teste : [ 'aba', 'cate' ] };

console.log( [1, 2, 3] );
console.log( console.teste );

log & log {} = '&funcao' 57 [=] ^
console & console {} log log @ [<=] teste [] 0 'aba' [<=] 1 'cate' [<=] [<=] = ^
[] 0 1 [<=] 1 2 [<=] 2 3 [<=] 1 console @ log [@] $ ^
console @ teste [@] 1 console @ log [@] $ ^
.
msg & msg arguments @ 0 [@] = ^
msg @ println # undefined ^
undefined @ '&retorno' @ ~

4)
function log( msg ) {
  msg asm{println # undefined};
}

function criaObj() {
  return { a : [ {}, { teste: 1 }, c=24*8+1 ], b: 'nome' };
}

let obj;
let c;
obj = criaObj();

log( obj );
log( obj.a );
log( obj.a[obj.a[1].teste+1] );

log & log {} = '&funcao' 66 [=] ^
criaObj & criaObj {} = '&funcao' 86 [=] ^
obj & c & obj 0 criaObj @ $ = ^
obj @ 1 log @ $ ^
obj @ a [@] 1 log @ $ ^
obj @ a [@] obj @ a [@] 1 [@] teste [@] 1 + [@] 1 log @ $ ^
.
msg & msg arguments @ 0 [@] = ^
msg @ println # undefined ^
undefined @ '&retorno' @ ~
{} a [] 0 {} [<=] 1 {} teste 1 [<=] [<=] 2 c 24 8 * 1 + = [<=] [<=] b 'nome' [<=] '&retorno' @ ~
undefined @ '&retorno' @ ~

5)
let par = function( n ) {
  if( n % 2 == 0 )
    return true;
  else
    return false;
};

let a = par( 4 );

6)
function log( msg ) {
  msg asm{println # undefined};
}

function map( a, f ) {
  let res = [];

  forEach( a, (x,j) => (res[j] = f(x)) );

  return res;
}

function forEach( array, funcao ) {
  for( let i = 0; i < array.size; i = i + 1 )
    funcao( array[i], i );
}

let a = [ 1, 2, 3, 4 ];
log( map( a, x => x*x + 1 ) );

7)
function log( msg ) {
  msg asm{println # undefined};
}

function invert( a ) {
  let res = [];

  for( let i = 0; i < a.size; i = i + 1 )
    res[a.size-i-1] = a[i];

  return res;
}

function reduce( a, f, x ) {
  for( let i = 0; i < a.size; i = i + 1 )
    x = f( a[i], x, i );

  return x;
}

let a = [1, 2, 3, 4, 5];

log( reduce( a, (x,y) => x + y, 0 ) );

let b = [ x => 2*x, x => x + 1 ];

let pipe = (af, x) => reduce( af, (f,x) => f(x), x );

log( pipe( b, 9 ) );
log( pipe( invert( b ), 9 ) );

8)
function criaPessoa( nome, sobrenome ) {
  return { nome: nome, sobrenome: sobrenome, nomeCompleto : pessoa => pessoa.nome + ' ' + pessoa.sobrenome };
}

function log( msg ) {
  msg asm{println # undefined};
}

let p = criaPessoa( 'Maria', 'da Silva' );

log( p.nomeCompleto( p ) );

9)
function log( msg ) {
  msg asm{println # undefined};
}

function mdc( a = 36, b = 48 ) {
  if( b == 0 )
    return a;
  else
    return mdc( b, a%b );
}

log( mdc() );
log( mdc( 18 ) );
log( mdc( 15, 25 ) );

10)
function log( msg ) {
  msg asm{println # undefined};
}

function imprimeMdc( a = 36, b = 48, print = m => log( 'Saida: ' + m )  ) {
  if( b == 0 )
    print( a );
  else
    imprimeMdc( b, a%b, print );
}

imprimeMdc( 24, 18 );
imprimeMdc( 8, 4, log );
