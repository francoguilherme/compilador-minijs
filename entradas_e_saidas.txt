1)

let str = "hello";
function valor() { return str + ", world"; }
let a = valor();

str & str "hello" = ^
valor & valor {} = '&funcao' 25 [=] ^
a & a 0 valor @ $ = ^
.
str @ ", world" + '&retorno' @ ~
undefined @ '&retorno' @ ~

2)

function sqr(x) { return x*x; }
let a = sqr( 5.2 );

sqr & sqr {} = '&funcao' 20 [=] ^
a & a 5.2 1 sqr @ $ = ^
.
x & x arguments @ 0 [@] = ^
x @ x @ * '&retorno' @ ~
undefined @ '&retorno' @ ~

3)

function mdc( a, b ) {
  if( b == 0 )
    return a;
  else
    return mdc( b, a % b );
}

let a = mdc( 24, 33  );

4)

function teste( a, b ) {
  if( a > b )
    return a;
}

let um = teste( 3, 4 ),
    dois = teste( 4, 3 );

teste & teste {} = '&funcao' 32 [=] ^
um & um 3 4 2 teste @ $ = ^
dois & dois 4 3 2 teste @ $ = ^
.
a & a arguments @ 0 [@] = ^
b & b arguments @ 1 [@] = ^
a @ b @ > 59 ? 64 # a @ '&retorno' @ ~
undefined @ '&retorno' @ ~

5)

function log( msg ) {
  msg asm{println # undefined};
}

let r = log( 'Hello, world!' );

log & log {} = '&funcao' 20 [=] ^
r & r 'Hello, world!' 1 log @ $ = ^
.
msg & msg arguments @ 0 [@] = ^
msg @ println # undefined ^
undefined @ '&retorno' @ ~

6)

let console = {};
let Number = {};

function log( msg ) {
  msg asm{println # undefined};
}

function number_to_string( msg ) {
  msg asm{to_string # '&retorno' @ ~};
}

console.log = log;
Number.toString = number_to_string;

let a = "Saida: ";
let b = 3.14;

console.log( a + Number.toString( b ) );

7)

let console = {};

function exit( n ) {
  'Codigo de erro: ' asm{print # undefined};
  n asm{println # undefined};
  0 asm{.};
}

function teste( a, b, c ) {
  exit( b );
}

let a = "Saida: ";
let b = 3.14;

console.teste = {};
console.teste.log = [];
console.teste.log[1] = teste;

console.teste.log[1]( a, b, "5" );

8)

function f( x ) {
  let b = 5 * x;
  let c = {};

  c.num = b;
  c.arr = [];
  c.arr[1] = 0;
  return c ;
}

let res = f( 11 );

f & f {} = '&funcao' 20 [=] ^
res & res 11 1 f @ $ = ^
.
x & x arguments @ 0 [@] = ^
b & b 5 x @ * = ^
c & c {} = ^
c @ num b @ [=] ^
c @ arr [] [=] ^
c @ arr [@] 1 0 [=] ^
c @ '&retorno' @ ~
undefined @ '&retorno' @ ~

9)

function f( x ) {
  let b = f;
  f = x;
  return b;
}

let a;
let g = f( a = [], {} );

10)

function getNome( obj ) { return obj.nome; }

function getClass( obj ) { return obj.class; }

function criaAluno( nome, celular, email ) {
  let aluno = {};

  aluno.nome = nome;
  aluno.celular = celular;
  aluno.email = email;
  aluno.super = prototipoAluno;
  aluno.getNome = getNome;

  return aluno;
}

function log( msg ) {
  msg asm{println # undefined};
}

function invoke( obj, metodo ) {
  if( toString( obj[metodo] ) == 'undefined' )
    return obj.super[metodo]( obj.super );
  else
    return obj[metodo]( obj );
}

function toString( msg ) {
  msg asm{to_string # '&retorno' @ ~};
}

let prototipoAluno = {};

prototipoAluno.class = 'Classe Aluno';
prototipoAluno.getClass = getClass;

let joao = criaAluno( 'Joao', '123456', 'eu@aqui.com' );
let maria = criaAluno( 'Maria', '123457', 'voce@la.com' );

log( invoke( joao, 'getNome' ) );
log( invoke( joao, 'getClass' ) );
log( invoke( maria, 'getNome' ) );
log( invoke( maria, 'getClass' ) );